#!/usr/bin/env python3
"""
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤
"""

from config import *
from main_analyzer import BitrixCallAnalyzer


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    st.set_page_config(
        page_title="Bitrix24 Local AI Analytics",
        page_icon="ü§ñ",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    st.title("ü§ñ Bitrix24 Local AI Analytics")
    st.markdown("**–ü–æ–ª–Ω–æ—Å—Ç—å—é –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤ —Å –ò–ò** ‚Ä¢ Whisper + Transformers")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUDA
    device_info = "üî• CUDA GPU" if torch.cuda.is_available() else "üíª CPU"
    st.sidebar.info(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {device_info}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è analyzer
    if 'analyzer' not in st.session_state:
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –ò–ò..."):
            st.session_state.analyzer = BitrixCallAnalyzer()

    analyzer = st.session_state.analyzer

    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bitrix24
        st.subheader("üè¢ Bitrix24")
        webhook_url = st.text_input("Webhook URL", value=analyzer.bitrix_api.webhook_url, type="password")
        username = st.text_input("Username", value=analyzer.bitrix_api.username)
        password = st.text_input("Password", type="password", value=analyzer.bitrix_api.password)

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            analyzer.bitrix_api.webhook_url = webhook_url
            analyzer.bitrix_api.username = username
            analyzer.bitrix_api.password = password
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

        st.markdown("---")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
        st.subheader("ü§ñ –°—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")

        whisper_status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞" if analyzer.audio_processor.whisper_model else "‚ùå –û—à–∏–±–∫–∞"
        st.write(f"**Whisper:** {whisper_status}")

        classifier_status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞" if analyzer.ai_analyzer.classifier else "‚ùå –û—à–∏–±–∫–∞"
        st.write(f"**–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–º:** {classifier_status}")

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("üìÖ –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞")

        # –í—ã–±–æ—Ä –¥–∞—Ç—ã
        date_option = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            ["–û–¥–∏–Ω –¥–µ–Ω—å", "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç"],
            horizontal=True
        )

        if date_option == "–û–¥–∏–Ω –¥–µ–Ω—å":
            selected_date = st.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                value=datetime.date.today() - datetime.timedelta(days=1)
            )
            start_date = end_date = selected_date
        else:
            col_start, col_end = st.columns(2)
            with col_start:
                start_date = st.date_input(
                    "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞:",
                    value=datetime.date.today() - datetime.timedelta(days=7)
                )
            with col_end:
                end_date = st.date_input(
                    "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞:",
                    value=datetime.date.today() - datetime.timedelta(days=1)
                )

    with col2:
        st.header("üöÄ –î–µ–π—Å—Ç–≤–∏—è")

        if st.button("ü§ñ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True):
            if start_date <= end_date:
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ò–ò –º–æ–¥–µ–ª—è–º–∏..."):
                    all_calls = []

                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                    date_range = pd.date_range(start_date, end_date)
                    progress_bar = st.progress(0)
                    status_text = st.empty()

                    for i, date in enumerate(date_range):
                        status_text.info(
                            f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {date.strftime('%d.%m.%Y')} (–¥–µ–Ω—å {i + 1} –∏–∑ {len(date_range)})")

                        target_datetime = datetime.datetime.combine(date.date(), datetime.time())
                        calls = analyzer.process_calls_for_date(target_datetime)
                        all_calls.extend(calls)

                        progress_bar.progress((i + 1) / len(date_range))

                    st.session_state.all_calls = all_calls
                    status_text.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_calls)} –∑–≤–æ–Ω–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ò–ò –º–æ–¥–µ–ª–µ–π")
            else:
                st.error("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    show_analysis_results()


def show_analysis_results():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    if 'all_calls' not in st.session_state or not st.session_state.all_calls:
        return

    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º")

    calls_data = st.session_state.all_calls

    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4, col5, col6 = st.columns(6)

    with col1:
        st.metric("–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤", len(calls_data))

    with col2:
        incoming = sum(1 for call in calls_data if call.get('call_direction') == 'incoming')
        st.metric("–í—Ö–æ–¥—è—â–∏–µ", incoming)

    with col3:
        outgoing = sum(1 for call in calls_data if call.get('call_direction') == 'outgoing')
        st.metric("–ò—Å—Ö–æ–¥—è—â–∏–µ", outgoing)

    with col4:
        unknown = sum(1 for call in calls_data if call.get('call_direction') == 'unknown')
        st.metric("–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ", unknown)

    with col5:
        with_audio = sum(1 for call in calls_data if 'audio_file' in call)
        st.metric("–° –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å—é", with_audio)

    with col6:
        analyzed = sum(1 for call in calls_data if 'analysis' in call)
        st.metric("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ò–ò", analyzed)

    # –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    show_summary_tables(calls_data)

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    show_call_details(calls_data)


def show_summary_tables(calls_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    st.header("üìä –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ò–ò –∞–Ω–∞–ª–∏–∑–∞")

    col1, col2 = st.columns(2)

    with col1:
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–º
        topic_data = {}
        for call in calls_data:
            analysis = call.get('analysis', {})
            topic = analysis.get('topic', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞')
            topic_data[topic] = topic_data.get(topic, 0) + 1

        if topic_data:
            st.subheader("üéØ –¢–µ–º—ã –∑–≤–æ–Ω–∫–æ–≤")
            topic_df = pd.DataFrame([
                {'–¢–µ–º–∞': topic, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count, '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{count / len(calls_data) * 100:.1f}%"}
                for topic, count in sorted(topic_data.items(), key=lambda x: x[1], reverse=True)
            ])
            st.dataframe(topic_df, use_container_width=True, hide_index=True)

    with col2:
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫–∞–∑–æ–≤
        rejection_data = {}
        for call in calls_data:
            analysis = call.get('analysis', {})
            rejection = analysis.get('rejection_reason')
            if rejection:
                rejection_data[rejection] = rejection_data.get(rejection, 0) + 1

        if rejection_data:
            st.subheader("‚ùå –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–æ–≤")
            rejection_df = pd.DataFrame([
                {'–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞': reason, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
                 '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{count / len([c for c in calls_data if c.get('analysis', {}).get('rejection_reason')]) * 100:.1f}%"}
                for reason, count in sorted(rejection_data.items(), key=lambda x: x[1], reverse=True)
            ])
            st.dataframe(rejection_df, use_container_width=True, hide_index=True)
        else:
            st.subheader("‚ùå –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–æ–≤")
            st.info("–û—Ç–∫–∞–∑—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö")


def show_call_details(calls_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∑–≤–æ–Ω–∫–æ–≤"""
    st.header("üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤–æ–Ω–∫–æ–≤ —Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    table_data = []
    for call in calls_data:
        analysis = call.get('analysis', {})

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        call_time = call.get('CALL_START_DATE', '')
        if call_time and 'T' in call_time:
            try:
                dt = datetime.datetime.fromisoformat(call_time.replace('Z', '+00:00'))
                formatted_time = dt.strftime('%d.%m.%Y %H:%M')
            except:
                formatted_time = call_time
        else:
            formatted_time = call_time

        table_data.append({
            '–î–∞—Ç–∞/–≤—Ä–µ–º—è': formatted_time,
            '–ú–µ–Ω–µ–¥–∂–µ—Ä': call.get('user_name', ''),
            '–¢–µ–ª–µ—Ñ–æ–Ω': call.get('PHONE_NUMBER', ''),
            '–¢–∏–ø': call.get('call_direction', 'unknown').replace('incoming', 'üìû –í—Ö–æ–¥—è—â–∏–π').replace('outgoing',
                                                                                                   'üì± –ò—Å—Ö–æ–¥—è—â–∏–π').replace(
                'unknown', '‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π'),
            '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': f"{call.get('CALL_DURATION', 0)} —Å–µ–∫",
            '–¢–µ–º–∞ (–ò–ò)': analysis.get('topic', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞'),
            '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ (–ò–ò)': analysis.get('rejection_reason', ''),
            '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è': '‚úÖ –ï—Å—Ç—å' if call.get('transcript') else '‚ùå –ù–µ—Ç'
        })

    if table_data:
        df = pd.DataFrame(table_data)
        st.dataframe(df, use_container_width=True)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
        show_transcript_examples(calls_data)


def show_transcript_examples(calls_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π"""
    st.subheader("üìù –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞")

    calls_with_transcripts = [call for call in calls_data if call.get('transcript') and call.get('analysis')]

    if calls_with_transcripts:
        selected_call = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            range(min(10, len(calls_with_transcripts))),
            format_func=lambda
                x: f"–ó–≤–æ–Ω–æ–∫ {x + 1}: {calls_with_transcripts[x].get('user_name', 'Unknown')} - {calls_with_transcripts[x]['analysis'].get('topic', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞')}"
        )

        if selected_call is not None:
            call = calls_with_transcripts[selected_call]
            analysis = call.get('analysis', {})

            col1, col2 = st.columns([2, 1])

            with col1:
                st.write("**–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:**")
                st.text_area("–¢–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", call.get('transcript', ''), height=200, disabled=True,
                             label_visibility="collapsed")

            with col2:
                st.write("**–ò–ò –ê–Ω–∞–ª–∏–∑:**")
                st.write(f"**–¢–µ–º–∞:** {analysis.get('topic', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞')}")

                if analysis.get('rejection_reason'):
                    st.write(f"**–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:** {analysis['rejection_reason']}")
                else:
                    st.write("**–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:** –ù–µ –≤—ã—è–≤–ª–µ–Ω–∞")

                key_points = analysis.get('key_points', [])
                if key_points:
                    st.write("**–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**")
                    for i, point in enumerate(key_points, 1):
                        st.write(f"{i}. {point}")
                else:
                    st.write("**–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:** –ù–µ –≤—ã—è–≤–ª–µ–Ω—ã")


if __name__ == "__main__":
    main()