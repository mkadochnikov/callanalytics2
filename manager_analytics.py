#!/usr/bin/env python3
"""
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots


def analyze_calls_by_manager(calls_data):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–≤–æ–Ω–∫–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    
    Args:
        calls_data: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–≤–æ–Ω–∫–∞—Ö
        
    Returns:
        DataFrame —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    """
    manager_stats = {}
    
    for call in calls_data:
        manager_name = call.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä')
        call_direction = call.get('call_direction', 'unknown')
        
        if manager_name not in manager_stats:
            manager_stats[manager_name] = {
                'incoming': 0,
                'outgoing': 0,
                'unknown': 0,
                'total': 0
            }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø–∞–º
        if call_direction == 'incoming':
            manager_stats[manager_name]['incoming'] += 1
        elif call_direction == 'outgoing':
            manager_stats[manager_name]['outgoing'] += 1
        else:
            manager_stats[manager_name]['unknown'] += 1
            
        manager_stats[manager_name]['total'] += 1
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    df_data = []
    for manager, stats in manager_stats.items():
        df_data.append({
            '–ú–µ–Ω–µ–¥–∂–µ—Ä': manager,
            '–í—Ö–æ–¥—è—â–∏–µ': stats['incoming'],
            '–ò—Å—Ö–æ–¥—è—â–∏–µ': stats['outgoing'],
            '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ': stats['unknown'],
            '–í—Å–µ–≥–æ': stats['total']
        })
    
    df = pd.DataFrame(df_data)
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–æ–Ω–∫–æ–≤
    df = df.sort_values('–í—Å–µ–≥–æ', ascending=False)
    
    return df


def create_manager_calls_chart(df_managers):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    
    Args:
        df_managers: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        
    Returns:
        Plotly figure –æ–±—ä–µ–∫—Ç
    """
    # –°–æ–∑–¥–∞–µ–º grouped bar chart
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
    fig.add_trace(go.Bar(
        name='–í—Ö–æ–¥—è—â–∏–µ',
        x=df_managers['–ú–µ–Ω–µ–¥–∂–µ—Ä'],
        y=df_managers['–í—Ö–æ–¥—è—â–∏–µ'],
        marker_color='#2E8B57',  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        text=df_managers['–í—Ö–æ–¥—è—â–∏–µ'],
        textposition='auto',
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
    fig.add_trace(go.Bar(
        name='–ò—Å—Ö–æ–¥—è—â–∏–µ',
        x=df_managers['–ú–µ–Ω–µ–¥–∂–µ—Ä'],
        y=df_managers['–ò—Å—Ö–æ–¥—è—â–∏–µ'],
        marker_color='#4169E1',  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç
        text=df_managers['–ò—Å—Ö–æ–¥—è—â–∏–µ'],
        textposition='auto',
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if df_managers['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ'].sum() > 0:
        fig.add_trace(go.Bar(
            name='–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ',
            x=df_managers['–ú–µ–Ω–µ–¥–∂–µ—Ä'],
            y=df_managers['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ'],
            marker_color='#FFA500',  # –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç
            text=df_managers['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ'],
            textposition='auto',
        ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞–∫–µ—Ç
    fig.update_layout(
        title={
            'text': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º',
            'x': 0.5,
            'xanchor': 'center',
            'font': {'size': 18}
        },
        xaxis_title='–ú–µ–Ω–µ–¥–∂–µ—Ä—ã',
        yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤',
        barmode='group',
        height=500,
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        margin=dict(t=80, b=50, l=50, r=50)
    )
    
    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –æ—Å–∏ X –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –º–Ω–æ–≥–æ
    if len(df_managers) > 5:
        fig.update_xaxes(tickangle=45)
    
    return fig


def create_manager_total_calls_chart(df_managers):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    
    Args:
        df_managers: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        
    Returns:
        Plotly figure –æ–±—ä–µ–∫—Ç
    """
    fig = px.pie(
        df_managers, 
        values='–í—Å–µ–≥–æ', 
        names='–ú–µ–Ω–µ–¥–∂–µ—Ä',
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º'
    )
    
    fig.update_traces(
        textposition='inside', 
        textinfo='percent+label',
        hovertemplate='<b>%{label}</b><br>–ó–≤–æ–Ω–∫–æ–≤: %{value}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}<extra></extra>'
    )
    
    fig.update_layout(
        height=400,
        title={
            'x': 0.5,
            'xanchor': 'center',
            'font': {'size': 16}
        }
    )
    
    return fig


def create_manager_performance_table(df_managers):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    
    Args:
        df_managers: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        
    Returns:
        DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    df_performance = df_managers.copy()
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—Ö–æ–¥—è—â–∏—Ö –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    df_performance['% –í—Ö–æ–¥—è—â–∏—Ö'] = (df_performance['–í—Ö–æ–¥—è—â–∏–µ'] / df_performance['–í—Å–µ–≥–æ'] * 100).round(1)
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å—Ö–æ–¥—è—â–∏—Ö –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞  
    df_performance['% –ò—Å—Ö–æ–¥—è—â–∏—Ö'] = (df_performance['–ò—Å—Ö–æ–¥—è—â–∏–µ'] / df_performance['–í—Å–µ–≥–æ'] * 100).round(1)
    
    # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∫ –≤—Ö–æ–¥—è—â–∏–º
    df_performance['–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ò/–í'] = (df_performance['–ò—Å—Ö–æ–¥—è—â–∏–µ'] / df_performance['–í—Ö–æ–¥—è—â–∏–µ'].replace(0, 1)).round(2)
    
    return df_performance


def show_manager_analytics(calls_data):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –≤ Streamlit
    
    Args:
        calls_data: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–≤–æ–Ω–∫–∞—Ö
    """
    import streamlit as st
    
    st.header("üë• –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    df_managers = analyze_calls_by_manager(calls_data)
    
    if df_managers.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", len(df_managers))
    
    with col2:
        avg_calls = df_managers['–í—Å–µ–≥–æ'].mean()
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", f"{avg_calls:.1f}")
    
    with col3:
        top_manager = df_managers.iloc[0]['–ú–µ–Ω–µ–¥–∂–µ—Ä'] if len(df_managers) > 0 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        top_calls = df_managers.iloc[0]['–í—Å–µ–≥–æ'] if len(df_managers) > 0 else 0
        st.metric("–¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä", f"{top_manager} ({top_calls})")
    
    with col4:
        total_incoming = df_managers['–í—Ö–æ–¥—è—â–∏–µ'].sum()
        total_outgoing = df_managers['–ò—Å—Ö–æ–¥—è—â–∏–µ'].sum()
        ratio = total_outgoing / total_incoming if total_incoming > 0 else 0
        st.metric("–û–±—â–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ò/–í", f"{ratio:.2f}")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    tab1, tab2, tab3 = st.tabs(["üìä –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–∏–ø–∞–º", "ü•ß –û–±—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "üìã –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"])
    
    with tab1:
        # –ì—Ä–∞—Ñ–∏–∫ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Ç–∏–ø–∞–º –∑–≤–æ–Ω–∫–æ–≤
        fig_bar = create_manager_calls_chart(df_managers)
        st.plotly_chart(fig_bar, use_container_width=True)
    
    with tab2:
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        fig_pie = create_manager_total_calls_chart(df_managers)
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with tab3:
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        df_performance = create_manager_performance_table(df_managers)
        st.dataframe(df_performance, use_container_width=True, hide_index=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        st.subheader("üìà –ò–Ω—Å–∞–π—Ç—ã")
        
        # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        most_active = df_performance.iloc[0]
        st.info(f"üèÜ **–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä:** {most_active['–ú–µ–Ω–µ–¥–∂–µ—Ä']} —Å {most_active['–í—Å–µ–≥–æ']} –∑–≤–æ–Ω–∫–∞–º–∏")
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä —Å –ª—É—á—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥—è—â–∏—Ö/–≤—Ö–æ–¥—è—â–∏—Ö
        best_ratio_idx = df_performance['–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ò/–í'].idxmax()
        best_ratio_manager = df_performance.iloc[best_ratio_idx]
        st.info(f"üìû **–õ—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ò/–í:** {best_ratio_manager['–ú–µ–Ω–µ–¥–∂–µ—Ä']} ({best_ratio_manager['–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ò/–í']})")
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –∏—Å—Ö–æ–¥—è—â–∏—Ö
        best_outgoing_idx = df_performance['% –ò—Å—Ö–æ–¥—è—â–∏—Ö'].idxmax()
        best_outgoing_manager = df_performance.iloc[best_outgoing_idx]
        st.info(f"üì± **–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö:** {best_outgoing_manager['–ú–µ–Ω–µ–¥–∂–µ—Ä']} ({best_outgoing_manager['% –ò—Å—Ö–æ–¥—è—â–∏—Ö']}%)")

