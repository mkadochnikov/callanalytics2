#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Bitrix24 Local AI Analytics
"""

import subprocess
import sys
import platform
import os


def run_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {command}")
    result = subprocess.run(command, shell=True, capture_output=True, text=True)

    if result.stdout:
        print(result.stdout)
    if result.stderr:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {result.stderr}")

    return result.returncode == 0


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    version = sys.version_info
    print(f"Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")

    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ!")
        return False

    print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
    return True


def detect_cuda():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUDA"""
    try:
        result = subprocess.run(["nvidia-smi"], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ NVIDIA GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é CUDA
            if "CUDA Version:" in result.stdout:
                cuda_line = [line for line in result.stdout.split('\n') if 'CUDA Version:' in line]
                if cuda_line:
                    print(f"CUDA –≤–µ—Ä—Å–∏—è: {cuda_line[0].split('CUDA Version:')[1].strip()}")
            return True
        else:
            print("‚ÑπÔ∏è NVIDIA GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
            return False
    except FileNotFoundError:
        print("‚ÑπÔ∏è NVIDIA –¥—Ä–∞–π–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
        return False


def install_system_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\n=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===")

    system = platform.system().lower()

    if system == "linux":
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Linux —Å–∏—Å—Ç–µ–º–∞")
        commands = [
            "sudo apt-get update",
            "sudo apt-get install -y ffmpeg portaudio19-dev python3-dev build-essential"
        ]

        for cmd in commands:
            print(f"\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {cmd}")
            if not run_command(cmd):
                print(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {cmd}")
                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ sudo")

    elif system == "darwin":  # macOS
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ macOS —Å–∏—Å—Ç–µ–º–∞")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Homebrew
        if run_command("which brew"):
            commands = [
                "brew install ffmpeg portaudio"
            ]
            for cmd in commands:
                run_command(cmd)
        else:
            print("‚ö†Ô∏è Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –≤—Ä—É—á–Ω—É—é")

    elif system == "windows":
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Windows —Å–∏—Å—Ç–µ–º–∞")
        print("‚ÑπÔ∏è –î–ª—è Windows —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –≤—Ä—É—á–Ω—É—é —Å https://ffmpeg.org/download.html")
        print("‚ÑπÔ∏è –ò –¥–æ–±–∞–≤—å—Ç–µ FFmpeg –≤ PATH")

    print("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")


def install_python_packages():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Python –ø–∞–∫–µ—Ç—ã"""
    print("\n=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    basic_packages = [
        "streamlit>=1.28.0",
        "requests>=2.31.0",
        "pandas>=2.0.0",
        "plotly>=5.15.0",
        "beautifulsoup4>=4.12.0",
        "pytz>=2023.3",
        "numpy>=1.24.0",
        "scipy>=1.10.0",
        "librosa>=0.10.0",
        "soundfile>=0.12.0"
    ]

    print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã...")
    for package in basic_packages:
        if not run_command(f"pip install '{package}'"):
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}")
            return False

    # PyTorch - –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã
    print("\n=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch ===")
    cuda_available = detect_cuda()

    if cuda_available:
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyTorch —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA...")
        torch_cmd = "pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118"
    else:
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyTorch –¥–ª—è CPU...")
        torch_cmd = "pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu"

    if not run_command(torch_cmd):
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyTorch")
        return False

    # Transformers –∏ Whisper
    print("\n=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ò–ò –º–æ–¥–µ–ª–µ–π ===")
    ai_packages = [
        "transformers>=4.35.0",
        "openai-whisper>=20231117"
    ]

    for package in ai_packages:
        print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
        if not run_command(f"pip install '{package}'"):
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}")
            return False

    print("‚úÖ –í—Å–µ Python –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def test_installation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ===")

    tests = [
        ("import torch; print(f'PyTorch: {torch.__version__}')", "PyTorch"),
        ("import transformers; print(f'Transformers: {transformers.__version__}')", "Transformers"),
        ("import whisper; print(f'Whisper: –¥–æ—Å—Ç—É–ø–µ–Ω')", "Whisper"),
        ("import streamlit; print(f'Streamlit: {streamlit.__version__}')", "Streamlit"),
        ("import torch; print(f'CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}')", "CUDA –ø—Ä–æ–≤–µ—Ä–∫–∞")
    ]

    for test_code, name in tests:
        try:
            result = subprocess.run([sys.executable, "-c", test_code],
                                    capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                print(f"‚úÖ {name}: {result.stdout.strip()}")
            else:
                print(f"‚ùå {name}: {result.stderr.strip()}")
        except Exception as e:
            print(f"‚ùå {name}: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ - {e}")


def create_env_file():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞"""
    env_content = """# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bitrix24
BITRIX_WEBHOOK_URL=https://your-domain.bitrix24.ru/rest/1/your-webhook-code
BITRIX_USERNAME=your-username  
BITRIX_PASSWORD=your-password

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π –ù–ï —Ç—Ä–µ–±—É–µ—Ç—Å—è!
"""

    if not os.path.exists('.env'):
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    else:
        print("‚ÑπÔ∏è –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("ü§ñ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Bitrix24 Local AI Analytics")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if not check_python_version():
        return

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        install_system_dependencies()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –ø–∞–∫–µ—Ç—ã
        if not install_python_packages():
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –ø–∞–∫–µ—Ç–æ–≤")
            return

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        test_installation()

        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
        create_env_file()

        print("\n" + "=" * 50)
        print("üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Bitrix24")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: streamlit run bitrix_analytics.py")
        print("3. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8501")
        print("\nüí° –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –º–æ–¥–µ–ª–∏ –ò–ò —Å–∫–∞—á–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (~2-3GB)")

    except KeyboardInterrupt:
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()