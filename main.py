#!/usr/bin/env python3
"""
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º
–ë–ï–ó –ê–ù–ê–õ–ò–ó–ê –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò
"""

from config import *
from main_analyzer import BitrixCallAnalyzer
from manager_analytics import show_manager_analytics
from pathlib import Path
import datetime
import streamlit as st
import pandas as pd
import pytz


def apply_professional_theme():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
    st.markdown("""
    <style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

    * {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    }

    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3 {
        font-weight: 600;
        color: #1a1a1a;
        letter-spacing: -0.02em;
    }

    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    [data-testid="metric-container"] {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        border: 1px solid #e1e4e8;
        padding: 16px;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.04);
    }

    [data-testid="metric-container"] label {
        font-size: 12px;
        font-weight: 500;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    [data-testid="metric-container"] [data-testid="metric-value"] {
        font-size: 24px;
        font-weight: 700;
        color: #1a1a1a;
    }

    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {
        background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 8px;
        font-weight: 500;
        font-size: 13px;
        transition: all 0.2s ease;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .stButton > button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    /* Sidebar —É–ª—É—á—à–µ–Ω–∏—è */
    [data-testid="stSidebar"] {
        background: linear-gradient(180deg, #f8f9fa 0%, #ffffff 100%);
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ */
    .table-header {
        background: #2c3e50;
        color: white;
        padding: 12px 8px;
        border-radius: 8px 8px 0 0;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 11px;
        letter-spacing: 0.5px;
        text-align: center;
        margin-bottom: 0;
    }

    .table-row {
        border-bottom: 1px solid #e9ecef;
        padding: 8px;
        transition: background-color 0.2s ease;
    }

    .table-row:hover {
        background-color: #f8f9fa;
    }

    .table-cell {
        font-size: 13px;
        color: #2c3e50;
        display: flex;
        align-items: center;
        min-height: 35px;
    }

    .table-cell-center {
        justify-content: center;
        text-align: center;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
    .info-card {
        background: white;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        border-left: 4px solid #3498db;
        margin-bottom: 15px;
    }

    .warning-card {
        background: #fff3cd;
        border-left-color: #ffc107;
    }

    .success-card {
        background: #d1ecf1;
        border-left-color: #17a2b8;
    }

    /* –ö–Ω–æ–ø–∫–∞-–ª—É–ø–∞ */
    .view-button {
        background: none !important;
        border: none !important;
        font-size: 18px !important;
        padding: 4px 8px !important;
        border-radius: 4px !important;
        color: #3498db !important;
        cursor: pointer !important;
        transition: all 0.2s ease !important;
    }

    .view-button:hover {
        background: #e8f4f8 !important;
        transform: scale(1.1) !important;
    }
    </style>
    """, unsafe_allow_html=True)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    st.set_page_config(
        page_title="Bitrix24 AI –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ–º—É
    apply_professional_theme()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    if 'show_call_modal' not in st.session_state:
        st.session_state.show_call_modal = False

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∏–ª–µ–º
    st.markdown("""
    <div style='text-align: center; padding: 20px 0; margin-bottom: 30px; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.15);'>
        <h1 style='color: white; margin: 0; font-size: 32px; font-weight: 700;'>
            üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Bitrix24
        </h1>
        <p style='color: rgba(255,255,255,0.9); margin: 10px 0 0 0; font-size: 14px; font-weight: 400;'>
            –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤ ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ AI –º–æ–¥–µ–ª–∏
        </p>
    </div>
    """, unsafe_allow_html=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUDA
    import torch
    device_info = "üöÄ NVIDIA CUDA GPU" if torch.cuda.is_available() else "üíª –†–µ–∂–∏–º CPU"
    st.sidebar.markdown(f"""
    <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white; padding: 10px; border-radius: 8px; text-align: center;
                font-weight: 600; font-size: 13px; margin-bottom: 20px;'>
        {device_info}
    </div>
    """, unsafe_allow_html=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è analyzer
    if 'analyzer' not in st.session_state:
        with st.spinner("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π..."):
            st.session_state.analyzer = BitrixCallAnalyzer()

    analyzer = st.session_state.analyzer

    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.markdown("### ‚öôÔ∏è –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bitrix24
        with st.expander("üè¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Bitrix24", expanded=False):
            webhook_url = st.text_input("Webhook URL", value=analyzer.bitrix_api.webhook_url, type="password")
            username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=analyzer.bitrix_api.username)
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", value=analyzer.bitrix_api.password)

            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
                analyzer.bitrix_api.webhook_url = webhook_url
                analyzer.bitrix_api.username = username
                analyzer.bitrix_api.password = password
                st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
        with st.expander("ü§ñ –°—Ç–∞—Ç—É—Å AI –º–æ–¥–µ–ª–µ–π", expanded=True):
            whisper_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if analyzer.audio_processor.whisper_model else "‚ùå –û—à–∏–±–∫–∞"
            classifier_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if analyzer.ai_analyzer.classifier else "‚ùå –û—à–∏–±–∫–∞"

            st.markdown(f"""
            <div style='background: #f8f9fa; padding: 10px; border-radius: 8px;'>
                <div style='margin-bottom: 8px;'>
                    <span style='font-weight: 600; font-size: 12px;'>Whisper ASR:</span>
                    <span style='float: right; font-size: 12px;'>{whisper_status}</span>
                </div>
                <div>
                    <span style='font-weight: 600; font-size: 12px;'>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</span>
                    <span style='float: right; font-size: 12px;'>{classifier_status}</span>
                </div>
            </div>
            """, unsafe_allow_html=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º
        if hasattr(analyzer.ai_analyzer, 'custom_objections'):
            from config import OBJECTION_CATEGORIES
            custom_count = len(analyzer.ai_analyzer.custom_objections)
            total_count = len(OBJECTION_CATEGORIES) + custom_count

            st.markdown(f"""
            <div style='background: #e8f4f8; padding: 10px; border-radius: 8px; margin-top: 10px;'>
                <div style='font-weight: 600; font-size: 12px; color: #2c3e50; margin-bottom: 5px;'>
                    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π
                </div>
                <div style='font-size: 11px; color: #5a6c7d;'>
                    –í—Å–µ–≥–æ: {total_count} | –ë–∞–∑–æ–≤—ã—Ö: {len(OBJECTION_CATEGORIES)} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö: {custom_count}
                </div>
            </div>
            """, unsafe_allow_html=True)

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([2, 1])

    with col1:
        st.markdown("### üìÖ –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞")

        # –í—ã–±–æ—Ä –¥–∞—Ç—ã
        date_option = st.radio(
            "",
            ["–û–¥–∏–Ω –¥–µ–Ω—å", "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç"],
            horizontal=True,
            label_visibility="collapsed"
        )

        if date_option == "–û–¥–∏–Ω –¥–µ–Ω—å":
            selected_date = st.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
                value=datetime.date.today() - datetime.timedelta(days=1)
            )
            start_date = end_date = selected_date
        else:
            col_start, col_end = st.columns(2)
            with col_start:
                start_date = st.date_input(
                    "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞",
                    value=datetime.date.today() - datetime.timedelta(days=7)
                )
            with col_end:
                end_date = st.date_input(
                    "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞",
                    value=datetime.date.today() - datetime.timedelta(days=1)
                )

    with col2:
        st.markdown("### üöÄ –î–µ–π—Å—Ç–≤–∏—è")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∞
        reanalysis_available = False
        total_cached_calls = 0

        if start_date <= end_date:
            date_range_check = pd.date_range(start_date, end_date)
            for date_check in date_range_check:
                target_datetime = datetime.datetime.combine(date_check.date(), datetime.time())
                reanalysis_info = analyzer.data_manager.get_reanalysis_info(target_datetime)
                if reanalysis_info["can_reanalyze"]:
                    reanalysis_available = True
                    total_cached_calls += reanalysis_info.get("calls_with_transcripts", 0)

        # –û–ø—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∞
        force_reanalyze = False
        if reanalysis_available:
            force_reanalyze = st.checkbox(
                f"üîÑ –ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ ({total_cached_calls} –∑–≤–æ–Ω–∫–æ–≤)",
                help="–û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"
            )

        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        button_text = "üîÑ –ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" if force_reanalyze else "ü§ñ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"

        if st.button(button_text, type="primary", use_container_width=True):
            if start_date <= end_date:
                processing_text = "–ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏..." if force_reanalyze else "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å AI –º–æ–¥–µ–ª—è–º–∏..."

                with st.spinner(processing_text):
                    all_calls = []
                    date_range = pd.date_range(start_date, end_date)
                    progress_bar = st.progress(0)
                    status_text = st.empty()

                    for i, date in enumerate(date_range):
                        action_text = "–ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑" if force_reanalyze else "–û–±—Ä–∞–±–æ—Ç–∫–∞"
                        status_text.info(f"üîÑ {action_text}: {date.strftime('%d.%m.%Y')} ({i + 1}/{len(date_range)})")

                        target_datetime = datetime.datetime.combine(date.date(), datetime.time())
                        calls = analyzer.process_calls_for_date(target_datetime, force_reanalyze=force_reanalyze)
                        all_calls.extend(calls)
                        progress_bar.progress((i + 1) / len(date_range))

                    st.session_state.all_calls = all_calls
                    status_text.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_calls)} –∑–≤–æ–Ω–∫–æ–≤")
            else:
                st.error("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        if 'all_calls' in st.session_state and st.session_state.all_calls:
            if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", width='stretch'):
                report_path = analyzer.export_objections_report(st.session_state.all_calls)
                st.success(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    show_analysis_results()


def show_analysis_results():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    if 'all_calls' not in st.session_state or not st.session_state.all_calls:
        return

    st.markdown("### üìä –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

    calls_data = st.session_state.all_calls
    analyzer = st.session_state.analyzer
    objections_stats = analyzer.get_objections_statistics(calls_data)

    # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∏–ª–µ
    col1, col2, col3, col4, col5, col6 = st.columns(6)

    with col1:
        st.metric("–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤", len(calls_data))

    with col2:
        incoming = sum(1 for call in calls_data if call.get('call_direction') == 'incoming')
        st.metric("–í—Ö–æ–¥—è—â–∏–µ", incoming)

    with col3:
        outgoing = sum(1 for call in calls_data if call.get('call_direction') == 'outgoing')
        st.metric("–ò—Å—Ö–æ–¥—è—â–∏–µ", outgoing)

    with col4:
        with_audio = sum(1 for call in calls_data if 'audio_file' in call)
        st.metric("–° –∞—É–¥–∏–æ", with_audio)

    with col5:
        analyzed = sum(1 for call in calls_data if 'analysis' in call)
        st.metric("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", analyzed)

    with col6:
        objections_count = objections_stats['total_calls_with_objections']
        objections_percent = (objections_count / len(calls_data) * 100) if calls_data else 0
        st.metric("–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è", f"{objections_count} ({objections_percent:.1f}%)")

    st.markdown("---")

    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    show_manager_analytics(calls_data)

    st.markdown("---")

    # –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    show_summary_tables(calls_data, objections_stats)

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    show_call_details(calls_data)


def show_summary_tables(calls_data, objections_stats):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    st.markdown("### üìà –°–≤–æ–¥–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞")

    col1, col2 = st.columns(2)

    with col1:
        topic_data = {}
        for call in calls_data:
            analysis = call.get('analysis', {})
            topic = analysis.get('topic', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
            topic_data[topic] = topic_data.get(topic, 0) + 1

        if topic_data:
            st.markdown("#### üéØ –¢–µ–º—ã –∑–≤–æ–Ω–∫–æ–≤")
            topic_df = pd.DataFrame([
                {'–¢–µ–º–∞': topic, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count, '–î–æ–ª—è': f"{count / len(calls_data) * 100:.1f}%"}
                for topic, count in sorted(topic_data.items(), key=lambda x: x[1], reverse=True)
            ])
            st.dataframe(topic_df, use_container_width=True, hide_index=True)

    with col2:
        objections = objections_stats['objections']
        if objections:
            st.markdown("#### üö´ –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
            objection_df = pd.DataFrame([
                {'–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ': objection, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
                 '–î–æ–ª—è': f"{count / objections_stats['total_calls_with_objections'] * 100:.1f}%"}
                for objection, count in sorted(objections.items(), key=lambda x: x[1], reverse=True)
            ])
            st.dataframe(objection_df, width='stretch', hide_index=True)


def show_call_details(calls_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∑–≤–æ–Ω–∫–æ–≤ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏ –ª—É–ø—ã"""
    st.header("üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤–æ–Ω–∫–æ–≤ —Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º")

    if not calls_data:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    header_cols = st.columns([2, 2, 2, 1, 1.5, 3, 4, 1])
    headers = ["–î–∞—Ç–∞/–≤—Ä–µ–º—è", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–¢–µ–ª–µ—Ñ–æ–Ω", "–¢–∏–ø", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–¢–µ–º–∞ (–ò–ò)", "–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
               "–ü—Ä–æ—Å–º–æ—Ç—Ä"]

    for col, header in zip(header_cols, headers):
        with col:
            st.markdown(f'<div class="table-header">{header}</div>', unsafe_allow_html=True)

    # –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    for i, call in enumerate(calls_data):
        analysis = call.get('analysis', {})

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        call_time = call.get('CALL_START_DATE', '')
        if call_time and 'T' in call_time:
            try:
                dt = datetime.datetime.fromisoformat(call_time.replace('Z', '+00:00'))
                formatted_time = dt.strftime('%d.%m.%Y %H:%M')
            except:
                formatted_time = call_time
        else:
            formatted_time = call_time

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–≤–æ–Ω–∫–∞ —Å–æ —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏
        call_direction = call.get('call_direction', '')
        if call_direction == 'incoming':
            call_type = '‚Üê'
        elif call_direction == 'outgoing':
            call_type = '‚Üí'
        else:
            call_type = '‚Ä¢'

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–∏
        objection_reason = analysis.get('objection_reason', '')
        objection_recommendation = analysis.get('objection_recommendation', '')

        objection_summary = ""
        if objection_reason:
            if len(objection_reason) > 50:
                objection_summary = objection_reason[:47] + "..."
            else:
                objection_summary = objection_reason

            if objection_recommendation:
                if len(objection_recommendation) > 35:
                    rec_summary = objection_recommendation[:32] + "..."
                else:
                    rec_summary = objection_recommendation
                objection_summary += f" ‚Üí {rec_summary}"
        else:
            objection_summary = "‚Äî"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        has_data = bool(call.get('transcript') or call.get('audio_file'))

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        with st.container():
            row_cols = st.columns([2, 2, 2, 1, 1.5, 3, 4, 1])

            with row_cols[0]:
                st.markdown(f'<div class="table-cell">{formatted_time}</div>', unsafe_allow_html=True)
            with row_cols[1]:
                st.markdown(f'<div class="table-cell">{call.get("user_name", "")}</div>', unsafe_allow_html=True)
            with row_cols[2]:
                st.markdown(f'<div class="table-cell">{call.get("PHONE_NUMBER", "")}</div>', unsafe_allow_html=True)
            with row_cols[3]:
                st.markdown(f'<div class="table-cell table-cell-center">{call_type}</div>', unsafe_allow_html=True)
            with row_cols[4]:
                st.markdown(f'<div class="table-cell">{call.get("CALL_DURATION", 0)} —Å–µ–∫</div>', unsafe_allow_html=True)
            with row_cols[5]:
                st.markdown(f'<div class="table-cell">{analysis.get("topic", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞")}</div>',
                            unsafe_allow_html=True)
            with row_cols[6]:
                st.markdown(f'<div class="table-cell">{objection_summary}</div>', unsafe_allow_html=True)
            with row_cols[7]:
                if has_data:
                    if st.button("üîç", key=f"view_{i}", help="–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π", type="secondary"):
                        st.session_state.show_call_modal = True
                        st.session_state.selected_call_data = call
                        st.rerun()
                else:
                    st.markdown('<div class="table-cell table-cell-center">‚Äî</div>', unsafe_allow_html=True)

    # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    if st.session_state.get('show_call_modal', False) and 'selected_call_data' in st.session_state:
        show_call_modal_wide(st.session_state.selected_call_data)


def show_call_modal_wide(call_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —à–∏—Ä–æ–∫–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–≤–æ–Ω–∫–∞"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å st.dialog
    try:
        @st.dialog("üìû –î–µ—Ç–∞–ª–∏ –∑–≤–æ–Ω–∫–∞", width="large")
        def call_modal_dialog():
            show_call_details_content(call_data)

        call_modal_dialog()
    except:
        # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Streamlit
        with st.container():
            st.markdown("---")
            st.markdown("## üìû –î–µ—Ç–∞–ª–∏ –∑–≤–æ–Ω–∫–∞")
            show_call_details_content(call_data)

            if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key="close_modal"):
                st.session_state.show_call_modal = False
                st.rerun()


def show_call_details_content(call_data):
    """–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–≤–æ–Ω–∫–∞"""

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**üìû –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ**")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        call_time = call_data.get('CALL_START_DATE', '')
        if call_time and 'T' in call_time:
            try:
                dt = datetime.datetime.fromisoformat(call_time.replace('Z', '+00:00'))
                formatted_time = dt.strftime('%d.%m.%Y –≤ %H:%M')
            except:
                formatted_time = call_time
        else:
            formatted_time = call_time

        direction = call_data.get('call_direction', '')
        direction_text = '–í—Ö–æ–¥—è—â–∏–π ‚Üê' if direction == 'incoming' else '–ò—Å—Ö–æ–¥—è—â–∏–π ‚Üí' if direction == 'outgoing' else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        st.markdown(f"""
        <div class="info-card">
            <strong>–î–∞—Ç–∞:</strong> {formatted_time}<br>
            <strong>–ú–µ–Ω–µ–¥–∂–µ—Ä:</strong> {call_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}<br>
            <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {call_data.get('PHONE_NUMBER', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}<br>
            <strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> {call_data.get('CALL_DURATION', 0)} —Å–µ–∫—É–Ω–¥<br>
            <strong>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong> {direction_text}
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("**ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑**")

        analysis = call_data.get('analysis', {})
        topic = analysis.get('topic', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
        objection = analysis.get('objection_reason', '')
        recommendation = analysis.get('objection_recommendation', '')

        if objection:
            st.markdown(f"""
            <div class="info-card warning-card">
                <strong>–¢–µ–º–∞:</strong> {topic}<br>
                <strong>–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ:</strong> {objection}<br>
                <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> {recommendation if recommendation else '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'}
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="info-card success-card">
                <strong>–¢–µ–º–∞:</strong> {topic}<br>
                <strong>–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è:</strong> –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã<br>
                <strong>–°—Ç–∞—Ç—É—Å:</strong> –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫
            </div>
            """, unsafe_allow_html=True)

    # –¢–∞–±—ã –¥–ª—è –∞—É–¥–∏–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    tab1, tab2 = st.tabs(["üîä –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å", "üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"])

    with tab1:
        audio_file_path = call_data.get('audio_file')
        if audio_file_path and Path(audio_file_path).exists():
            try:
                with open(audio_file_path, 'rb') as audio_file:
                    audio_bytes = audio_file.read()

                st.audio(audio_bytes, format='audio/mp3')

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
                file_size = Path(audio_file_path).stat().st_size / (1024 * 1024)
                st.caption(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} –ú–ë")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ: {str(e)}")
        else:
            st.info("–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    with tab2:
        transcript = call_data.get('transcript')
        if transcript:
            st.text_area(
                "–¢–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞",
                value=transcript,
                height=400,
                label_visibility="collapsed"
            )
        else:
            st.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


if __name__ == "__main__":
    main()