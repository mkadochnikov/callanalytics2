#!/usr/bin/env python3
"""
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º
–ë–ï–ó –ê–ù–ê–õ–ò–ó–ê –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò
"""

from config import *
from main_analyzer import BitrixCallAnalyzer
from manager_analytics import show_manager_analytics
from pathlib import Path
import datetime
import streamlit as st
import pandas as pd
import pytz


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    st.set_page_config(
        page_title="Bitrix24 Local AI Analytics",
        page_icon="ü§ñ",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    st.title("ü§ñ Bitrix24 Local AI Analytics")
    st.markdown("**–ü–æ–ª–Ω–æ—Å—Ç—å—é –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤ —Å –ò–ò** ‚Ä¢ Whisper + Transformers")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUDA
    import torch
    device_info = "üî• CUDA GPU" if torch.cuda.is_available() else "üíª CPU"
    st.sidebar.info(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {device_info}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è analyzer
    if 'analyzer' not in st.session_state:
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –ò–ò..."):
            st.session_state.analyzer = BitrixCallAnalyzer()

    analyzer = st.session_state.analyzer

    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bitrix24
        st.subheader("üè¢ Bitrix24")
        webhook_url = st.text_input("Webhook URL", value=analyzer.bitrix_api.webhook_url, type="password")
        username = st.text_input("Username", value=analyzer.bitrix_api.username)
        password = st.text_input("Password", type="password", value=analyzer.bitrix_api.password)

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            analyzer.bitrix_api.webhook_url = webhook_url
            analyzer.bitrix_api.username = username
            analyzer.bitrix_api.password = password
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

        st.markdown("---")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö (–ë–ï–ó sentiment)
        st.subheader("ü§ñ –°—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")

        whisper_status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞" if analyzer.audio_processor.whisper_model else "‚ùå –û—à–∏–±–∫–∞"
        st.write(f"**Whisper:** {whisper_status}")

        classifier_status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞" if analyzer.ai_analyzer.classifier else "‚ùå –û—à–∏–±–∫–∞"
        st.write(f"**–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–º:** {classifier_status}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º (–ë–ï–ó sentiment)
        if hasattr(analyzer.ai_analyzer, 'custom_objections'):
            from config import OBJECTION_CATEGORIES
            custom_count = len(analyzer.ai_analyzer.custom_objections)
            total_count = len(OBJECTION_CATEGORIES) + custom_count
            st.write(
                f"**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π:** {total_count} (–±–∞–∑–æ–≤—ã—Ö: {len(OBJECTION_CATEGORIES)}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö: {custom_count})")

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("üìÖ –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞")

        # –í—ã–±–æ—Ä –¥–∞—Ç—ã
        date_option = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            ["–û–¥–∏–Ω –¥–µ–Ω—å", "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç"],
            horizontal=True
        )

        if date_option == "–û–¥–∏–Ω –¥–µ–Ω—å":
            selected_date = st.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                value=datetime.date.today() - datetime.timedelta(days=1)
            )
            start_date = end_date = selected_date
        else:
            col_start, col_end = st.columns(2)
            with col_start:
                start_date = st.date_input(
                    "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞:",
                    value=datetime.date.today() - datetime.timedelta(days=7)
                )
            with col_end:
                end_date = st.date_input(
                    "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞:",
                    value=datetime.date.today() - datetime.timedelta(days=1)
                )

    with col2:
        st.header("üöÄ –î–µ–π—Å—Ç–≤–∏—è")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∞
        reanalysis_available = False
        total_cached_calls = 0

        if start_date <= end_date:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            date_range_check = pd.date_range(start_date, end_date)
            for date_check in date_range_check:
                target_datetime = datetime.datetime.combine(date_check.date(), datetime.time())
                reanalysis_info = analyzer.data_manager.get_reanalysis_info(target_datetime)
                if reanalysis_info["can_reanalyze"]:
                    reanalysis_available = True
                    total_cached_calls += reanalysis_info.get("calls_with_transcripts", 0)

        # –û–ø—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∞
        force_reanalyze = False
        if reanalysis_available:
            force_reanalyze = st.checkbox(
                f"üîÑ –ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ ({total_cached_calls} –∑–≤–æ–Ω–∫–æ–≤)",
                help="–û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ"
            )

            if force_reanalyze:
                st.info(
                    "üìù –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤. –ê—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        button_text = "üîÑ –ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" if force_reanalyze else "ü§ñ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"

        if st.button(button_text, type="primary", use_container_width=True):
            if start_date <= end_date:
                processing_text = "–ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏..." if force_reanalyze else "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ò–ò –º–æ–¥–µ–ª—è–º–∏..."

                with st.spinner(processing_text):
                    all_calls = []

                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                    date_range = pd.date_range(start_date, end_date)
                    progress_bar = st.progress(0)
                    status_text = st.empty()

                    for i, date in enumerate(date_range):
                        action_text = "–ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑" if force_reanalyze else "–û–±—Ä–∞–±–æ—Ç–∫–∞"
                        status_text.info(
                            f"üîÑ {action_text}: {date.strftime('%d.%m.%Y')} (–¥–µ–Ω—å {i + 1} –∏–∑ {len(date_range)})")

                        target_datetime = datetime.datetime.combine(date.date(), datetime.time())

                        # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∞
                        calls = analyzer.process_calls_for_date(target_datetime, force_reanalyze=force_reanalyze)
                        all_calls.extend(calls)

                        progress_bar.progress((i + 1) / len(date_range))

                    st.session_state.all_calls = all_calls

                    if force_reanalyze:
                        status_text.success(f"‚úÖ –ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(all_calls)} –∑–≤–æ–Ω–∫–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏")
                    else:
                        status_text.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_calls)} –∑–≤–æ–Ω–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ò–ò –º–æ–¥–µ–ª–µ–π")
            else:
                st.error("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º
        if 'all_calls' in st.session_state and st.session_state.all_calls:
            if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º", use_container_width=True):
                report_path = analyzer.export_objections_report(st.session_state.all_calls)
                st.success(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    show_analysis_results()


def show_analysis_results():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ë–ï–ó –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò"""
    if 'all_calls' not in st.session_state or not st.session_state.all_calls:
        return

    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º")

    calls_data = st.session_state.all_calls

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π (–ë–ï–ó —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
    analyzer = st.session_state.analyzer
    objections_stats = analyzer.get_objections_statistics(calls_data)

    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4, col5, col6 = st.columns(6)

    with col1:
        st.metric("–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤", len(calls_data))

    with col2:
        incoming = sum(1 for call in calls_data if call.get('call_direction') == 'incoming')
        st.metric("–í—Ö–æ–¥—è—â–∏–µ", incoming)

    with col3:
        outgoing = sum(1 for call in calls_data if call.get('call_direction') == 'outgoing')
        st.metric("–ò—Å—Ö–æ–¥—è—â–∏–µ", outgoing)

    with col4:
        with_audio = sum(1 for call in calls_data if 'audio_file' in call)
        st.metric("–° –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å—é", with_audio)

    with col5:
        analyzed = sum(1 for call in calls_data if 'analysis' in call)
        st.metric("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ò–ò", analyzed)

    with col6:
        objections_count = objections_stats['total_calls_with_objections']
        objections_percent = (objections_count / len(calls_data) * 100) if calls_data else 0
        st.metric("–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è", f"{objections_count} ({objections_percent:.1f}%)")

    # –†–ê–ó–î–ï–õ: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    st.markdown("---")
    show_manager_analytics(calls_data)

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
    st.markdown("---")

    # –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–ë–ï–ó —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
    show_summary_tables(calls_data, objections_stats)

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (–ë–ï–ó —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
    show_call_details(calls_data)


def show_objections_analysis(calls_data, objections_stats):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –ë–ï–ó –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò"""
    st.header("üö´ –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤")

    if not objections_stats['objections']:
        st.info("–í –¥–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        return

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üìä –¢–æ–ø –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π")

        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        objections_df = pd.DataFrame([
            {
                '–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ': objection.replace('üéØ ', '').replace('‚è∞ ', '').replace('üîÑ ', '').replace('üîç ', '').replace(
                    'ü§ù ', '').replace('‚öôÔ∏è ', '').replace('üõ°Ô∏è ', '').replace('‚≠ê ', '').replace('üîß ', '').replace('üéì ',
                                                                                                                '').replace(
                    'üìù ', '').replace('‚ùì ', ''),
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
                '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{count / objections_stats['total_calls_with_objections'] * 100:.1f}%",
                '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': objection
            }
            for objection, count in sorted(objections_stats['objections'].items(), key=lambda x: x[1], reverse=True)
        ])

        st.dataframe(objections_df[['–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ü—Ä–æ—Ü–µ–Ω—Ç']], use_container_width=True, hide_index=True)

    with col2:
        st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–ø-5 –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π
        top_objections = list(objections_stats['objections'].keys())[:5]
        objection_categories = objections_stats['objection_categories']

        for objection in top_objections:
            if objection in objection_categories:
                recommendation = objection_categories[objection].get('recommendation', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥')
                st.write(f"**{objection}**")
                st.write(f"‚Üí {recommendation}")
                st.write("")


def show_summary_tables(calls_data, objections_stats):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ë–ï–ó –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò"""
    st.header("üìä –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ò–ò –∞–Ω–∞–ª–∏–∑–∞")

    col1, col2 = st.columns(2)

    with col1:
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–º
        topic_data = {}
        for call in calls_data:
            analysis = call.get('analysis', {})
            topic = analysis.get('topic', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞')
            topic_data[topic] = topic_data.get(topic, 0) + 1

        if topic_data:
            st.subheader("üéØ –¢–µ–º—ã –∑–≤–æ–Ω–∫–æ–≤")
            topic_df = pd.DataFrame([
                {'–¢–µ–º–∞': topic, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count, '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{count / len(calls_data) * 100:.1f}%"}
                for topic, count in sorted(topic_data.items(), key=lambda x: x[1], reverse=True)
            ])
            st.dataframe(topic_df, use_container_width=True, hide_index=True)

    with col2:
        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π
        objections = objections_stats['objections']
        if objections:
            st.subheader("üö´ –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
            objection_df = pd.DataFrame([
                {
                    '–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ': objection,
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
                    '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{count / objections_stats['total_calls_with_objections'] * 100:.1f}%"
                }
                for objection, count in sorted(objections.items(), key=lambda x: x[1], reverse=True)
            ])
            st.dataframe(objection_df, use_container_width=True, hide_index=True)
        else:
            st.subheader("üö´ –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
            st.info("–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö")


def show_call_details(calls_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∑–≤–æ–Ω–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ"""
    st.header("üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤–æ–Ω–∫–æ–≤ —Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    table_data = []
    for i, call in enumerate(calls_data):
        analysis = call.get('analysis', {})

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        call_time = call.get('CALL_START_DATE', '')
        if call_time and 'T' in call_time:
            try:
                dt = datetime.datetime.fromisoformat(call_time.replace('Z', '+00:00'))
                formatted_time = dt.strftime('%d.%m.%Y %H:%M')
            except:
                formatted_time = call_time
        else:
            formatted_time = call_time

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–∏
        objection_reason = analysis.get('objection_reason', '')
        objection_recommendation = analysis.get('objection_recommendation', '')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
        objection_info = ""
        if objection_reason:
            objection_info = f"{objection_reason}"
            if objection_recommendation:
                objection_info += f" ‚Üí {objection_recommendation}"

        table_data.append({
            'index': i,
            '–î–∞—Ç–∞/–≤—Ä–µ–º—è': formatted_time,
            '–ú–µ–Ω–µ–¥–∂–µ—Ä': call.get('user_name', ''),
            '–¢–µ–ª–µ—Ñ–æ–Ω': call.get('PHONE_NUMBER', ''),
            '–¢–∏–ø': 'üìû –í—Ö–æ–¥—è—â–∏–π' if call.get('call_direction') == 'incoming' else 'üì± –ò—Å—Ö–æ–¥—è—â–∏–π' if call.get(
                'call_direction') == 'outgoing' else '‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π',
            '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': f"{call.get('CALL_DURATION', 0)} —Å–µ–∫",
            '–¢–µ–º–∞ (–ò–ò)': analysis.get('topic', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞'),
            '–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è': objection_info,
            'has_transcript': bool(call.get('transcript')),
            'has_audio': bool(call.get('audio_file'))
        })

    if table_data:
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(table_data)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        col_headers = st.columns([1, 1.5, 1.5, 1, 1, 1.5, 3, 0.8, 0.8])
        headers = ['–î–∞—Ç–∞/–≤—Ä–µ–º—è', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–¢–µ–ª–µ—Ñ–æ–Ω', '–¢–∏–ø', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–¢–µ–º–∞ (–ò–ò)', '–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
                   '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è', '–ê—É–¥–∏–æ']

        for col, header in zip(col_headers, headers):
            col.markdown(f"**{header}**")

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for idx, row in df.iterrows():
            cols = st.columns([1, 1.5, 1.5, 1, 1, 1.5, 3, 0.8, 0.8])

            # –î–∞–Ω–Ω—ã–µ
            cols[0].write(row['–î–∞—Ç–∞/–≤—Ä–µ–º—è'])
            cols[1].write(row['–ú–µ–Ω–µ–¥–∂–µ—Ä'])
            cols[2].write(row['–¢–µ–ª–µ—Ñ–æ–Ω'])
            cols[3].write(row['–¢–∏–ø'])
            cols[4].write(row['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'])
            cols[5].write(row['–¢–µ–º–∞ (–ò–ò)'])
            cols[6].write(row['–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'])

            # –ö–Ω–æ–ø–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            if row['has_transcript']:
                if cols[7].button('üìÑ', key=f"transcript_{row['index']}", help="–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é"):
                    show_transcript_modal(calls_data[row['index']])
            else:
                cols[7].write('‚ùå')

            # –ö–Ω–æ–ø–∫–∞ –∞—É–¥–∏–æ
            if row['has_audio']:
                if cols[8].button('üîä', key=f"audio_{row['index']}", help="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –∑–∞–ø–∏—Å—å"):
                    show_audio_modal(calls_data[row['index']])
            else:
                cols[8].write('‚ùå')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
        st.markdown("---")
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            total_with_transcript = sum(1 for d in table_data if d['has_transcript'])
            st.metric("–° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π", f"{total_with_transcript}/{len(table_data)}")

        with col2:
            total_with_audio = sum(1 for d in table_data if d['has_audio'])
            st.metric("–° –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å—é", f"{total_with_audio}/{len(table_data)}")

        with col3:
            total_with_objections = sum(1 for d in table_data if d['–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'])
            st.metric("–° –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏", f"{total_with_objections}/{len(table_data)}")

        with col4:
            avg_duration = df['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'].apply(lambda x: int(x.split()[0])).mean()
            st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{avg_duration:.0f} —Å–µ–∫")


def show_transcript_modal(call_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
    call_info = f"""
    **–ú–µ–Ω–µ–¥–∂–µ—Ä:** {call_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}  
    **–¢–µ–ª–µ—Ñ–æ–Ω:** {call_data.get('PHONE_NUMBER', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}  
    **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {call_data.get('CALL_DURATION', 0)} —Å–µ–∫
    """

    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑
    analysis = call_data.get('analysis', {})
    analysis_info = f"""
    **–¢–µ–º–∞:** {analysis.get('topic', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}  
    **–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ:** {analysis.get('objection_reason', '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')}  
    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {analysis.get('objection_recommendation', '–ù–µ—Ç')}
    """

    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º expander
    with st.expander("üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", expanded=True):
        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ")
            st.markdown(call_info)

        with col2:
            st.markdown("### –ò–ò –ê–Ω–∞–ª–∏–∑")
            st.markdown(analysis_info)

        st.markdown("---")
        st.markdown("### –¢–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        transcript = call_data.get('transcript', '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        formatted_transcript = transcript.replace('. ', '.\n\n')

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º text_area –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        st.text_area(
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è",
            formatted_transcript,
            height=400,
            disabled=True,
            label_visibility="collapsed"
        )

        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", key=f"copy_{call_data.get('ID', '')}"):
            st.code(transcript)
            st.info("–í—ã–¥–µ–ª–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤—ã—à–µ")


def show_audio_modal(call_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä–æ–º"""
    audio_file_path = call_data.get('audio_file')

    if audio_file_path and Path(audio_file_path).exists():
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º expander
        with st.expander("üîä –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏", expanded=True):
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ
            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric("–ú–µ–Ω–µ–¥–∂–µ—Ä", call_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))

            with col2:
                st.metric("–¢–µ–ª–µ—Ñ–æ–Ω", call_data.get('PHONE_NUMBER', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))

            with col3:
                st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{call_data.get('CALL_DURATION', 0)} —Å–µ–∫")

            st.markdown("---")

            # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            try:
                with open(audio_file_path, 'rb') as audio_file:
                    audio_bytes = audio_file.read()

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä
                st.audio(audio_bytes, format='audio/mp3')

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
                file_size = Path(audio_file_path).stat().st_size / (1024 * 1024)  # –≤ –ú–ë
                st.info(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} –ú–ë")

                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–µ —Ç–æ–∂–µ
                if call_data.get('transcript'):
                    st.markdown("### üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")
                    st.text_area(
                        "–¢–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞",
                        call_data['transcript'],
                        height=200,
                        disabled=True,
                        label_visibility="collapsed"
                    )

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
                if call_data.get('analysis'):
                    analysis = call_data['analysis']
                    st.markdown("### ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑")

                    col1, col2 = st.columns(2)
                    with col1:
                        st.write(f"**–¢–µ–º–∞:** {analysis.get('topic', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
                        st.write(f"**–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ:** {analysis.get('objection_reason', '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')}")

                    with col2:
                        result = analysis.get('call_result', {})
                        st.write(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result.get('result', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
                        st.write(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {analysis.get('objection_recommendation', '–ù–µ—Ç')}")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {str(e)}")
    else:
        st.error("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")


def show_transcript_examples(calls_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ë–ï–ó –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò"""
    st.subheader("üìù –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞")

    calls_with_transcripts = [call for call in calls_data if call.get('transcript') and call.get('analysis')]

    if calls_with_transcripts:
        selected_call = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            range(min(10, len(calls_with_transcripts))),
            format_func=lambda
                x: f"–ó–≤–æ–Ω–æ–∫ {x + 1}: {calls_with_transcripts[x].get('user_name', 'Unknown')} - {calls_with_transcripts[x]['analysis'].get('topic', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞')}"
        )

        if selected_call is not None:
            call = calls_with_transcripts[selected_call]
            analysis = call.get('analysis', {})

            col1, col2 = st.columns([2, 1])

            with col1:
                st.write("**–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:**")
                st.text_area("–¢–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", call.get('transcript', ''), height=200, disabled=True,
                             label_visibility="collapsed")

            with col2:
                st.write("**–ò–ò –ê–Ω–∞–ª–∏–∑:**")
                st.write(f"**–¢–µ–º–∞:** {analysis.get('topic', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞')}")

                objection_reason = analysis.get('objection_reason')
                if objection_reason:
                    st.write(f"**–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ:** {objection_reason}")
                    recommendation = analysis.get('objection_recommendation')
                    if recommendation:
                        st.write(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {recommendation}")
                else:
                    st.write("**–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è:** –ù–µ –≤—ã—è–≤–ª–µ–Ω—ã")

                key_points = analysis.get('key_points', [])
                if key_points:
                    st.write("**–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**")
                    for i, point in enumerate(key_points, 1):
                        st.write(f"{i}. {point}")
                else:
                    st.write("**–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:** –ù–µ –≤—ã—è–≤–ª–µ–Ω—ã")


if __name__ == "__main__":
    main()