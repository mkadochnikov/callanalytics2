#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã NLU –∞–Ω–∞–ª–∏–∑–∞
–ó–∞–ø—É—Å–∫: python test_nlu.py
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from ai_analyzer import LocalAIAnalyzer
import json

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
TEST_TRANSCRIPTS = {
    "–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ": """
        –î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ø–æ –æ—Ç–µ–ª—å –¥–≤–æ—Ä–µ—Ü –ù–∞—Ä–∑–∞–Ω–æ–≤. –ú–µ–Ω—è –∑–æ–≤—É—Ç –û–ª—å–≥–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? 
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç –ì–∞–ª–∏–Ω–∞. –Ø —Ö–æ—Ç–µ–ª–∞ —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –Ω–æ—è–±—Ä—å. 
        –°–º–æ—Ç—Ä–∏—Ç–µ, –Ω–æ–º–µ—Ä –¥–µ–ª—é–∫—Å –±–µ–∑ –±–∞–ª–∫–æ–Ω–∞ –∑–∞ 12 –¥–Ω–µ–π –ø–æ–ª—É—á–∞–µ—Ç—Å—è 191 340. 
        –≠—Ç–æ –æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ. –ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, 200 —Å –ª–∏—à–Ω–∏–º –∑–∞ –ö–∏—Å–ª–æ–≤–æ–¥—Å–∫ —ç—Ç–æ —Å–ª–∏—à–∫–æ–º. 
        –ù–∞ –ú–∞–ª—å–¥–∏–≤—ã –¥–µ—à–µ–≤–ª–µ —Å–ª–µ—Ç–∞—Ç—å –º–æ–∂–Ω–æ.
    """,

    "–ù—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å": """
        –°–º–æ—Ç—Ä–∏—Ç–µ, –ø–æ–ª—É—á–∞–µ—Ç—Å—è —É –Ω–∞—Å 9 –Ω–æ—á–µ–π —Å –ø–∏—Ç–∞–Ω–∏–µ–º —à–≤–µ–¥—Å–∫–∏–π —Å—Ç–æ–ª.
        –°—Ç–æ–∏–º–æ—Å—Ç—å 230 600 —Ä—É–±–ª–µ–π.
        –Ø –≤—Å–µ –ø–æ–Ω—è–ª–∞. –ú—ã –æ–±–º–æ–∑–≥—É–µ–º, –ø–æ–±–µ—Å–µ–¥—É–µ–º —Å –º—É–∂–µ–º –∏ –µ—Å–ª–∏ —á—Ç–æ —è –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω—é.
        –ù—É–∂–Ω–æ —Å —Å–µ–º—å–µ–π –æ–±–≥–æ–≤–æ—Ä–∏—Ç—å.
    """,

    "–£—Å–ø–µ—à–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ": """
        –î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ–º —Å 3 —è–Ω–≤–∞—Ä—è –ø–æ 10 —è–Ω–≤–∞—Ä—è, –¥–≤–æ–µ –≤–∑—Ä–æ—Å–ª—ã—Ö.
        –•–æ—Ä–æ—à–æ, –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å! –°—á–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω, –∂–¥–µ–º –≤–∞—Å.
        –û—Ç–ª–∏—á–Ω–æ, –≤–Ω–µ—Å—É –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É —Å–µ–≥–æ–¥–Ω—è.
    """,

    "–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏": """
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —Ö–æ—Ç–µ–ª–∞ —É–∑–Ω–∞—Ç—å –ø–æ –ø–æ–≤–æ–¥—É –ª–µ—á–µ–±–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.
        –ö–∞–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤—Ö–æ–¥—è—Ç? –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É—Ä–æ–ª–æ–≥–∏–∏?
        –ò –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –º–æ–∂–Ω–æ –ª–∏ —Å –¥–µ—Ç—å–º–∏ –ø—Ä–∏–µ—Ö–∞—Ç—å.
    """,

    "–°–æ–º–Ω–µ–Ω–∏—è –≤ –º–µ–¥–±–∞–∑–µ": """
        –ê —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–∞—á –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥? –ú–Ω–µ –Ω—É–∂–Ω–æ –≥–ª–∞–∑–∞ –ø–æ–¥–ª–µ—á–∏—Ç—å.
        –ê –∫–∞–∫–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —É –≤—Ä–∞—á–µ–π? –ï—Å—Ç—å –ª–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ?
        –í –ü–∏–∫–µ—Ç–µ –±—ã–ª–∞ —Ö–æ—Ä–æ—à–∞—è –±–∞–∑–∞, –∞ —É –≤–∞—Å –∫–∞–∫?
    """
}


def test_nlu_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç NLU –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö"""
    print("=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï NLU –ê–ù–ê–õ–ò–ó–ê –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ô")
    print("=" * 80)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    print("\nüì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    try:
        analyzer = LocalAIAnalyzer()
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ NLU
        if hasattr(analyzer, 'use_nlu') and analyzer.use_nlu:
            print("‚úÖ NLU –º–æ–¥—É–ª—å –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            print("‚ö†Ô∏è NLU –º–æ–¥—É–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return

    print("\n" + "=" * 80)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    for test_name, transcript in TEST_TRANSCRIPTS.items():
        print(f"\nüìù –¢–ï–°–¢: {test_name}")
        print("-" * 40)

        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            if hasattr(analyzer, 'analyze_full_dialogue'):
                result = analyzer.analyze_full_dialogue(transcript)
            else:
                # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
                result = {
                    "topic": analyzer.classify_topic(transcript),
                    "objection": analyzer.find_objection_reason(transcript),
                    "key_points": analyzer.extract_key_points(transcript)
                }

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"üìä –¢–µ–º–∞: {result.get('topic', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")

            # –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è
            if result.get('objections'):
                print(f"üö´ –í–æ–∑—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(result['objections'])}")
                for obj in result['objections'][:2]:
                    print(f"   ‚Ä¢ {obj.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ')}")
                    print(f"     ‚Üí {obj.get('recommendation', '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')}")
            elif result.get('objection_reason'):
                print(f"üö´ –í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ: {result['objection_reason']}")
                if result.get('objection_recommendation'):
                    print(f"   ‚Üí {result['objection_recommendation']}")
            else:
                print("‚úÖ –í–æ–∑—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

            # –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞
            if result.get('call_result'):
                call_result = result['call_result']
                print(f"üìû –†–µ–∑—É–ª—å—Ç–∞—Ç: {call_result.get('result', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
                if call_result.get('confidence'):
                    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {call_result['confidence']:.2f}")

            # –ë–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã–µ
            if result.get('business_data'):
                business = result['business_data']
                if business.get('dates', {}).get('check_in'):
                    print(f"üìÖ –î–∞—Ç—ã: –Ω–∞–π–¥–µ–Ω—ã")
                if business.get('financial', {}).get('quoted_prices'):
                    print(f"üí∞ –¶–µ–Ω—ã: {len(business['financial']['quoted_prices'])} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                if business.get('guests', {}).get('total'):
                    print(f"üë• –ì–æ—Å—Ç–µ–π: {business['guests']['total']}")

            # –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
            if result.get('key_points'):
                print(f"üîë –ö–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {len(result['key_points'])}")
                for point in result['key_points'][:2]:
                    print(f"   ‚Ä¢ {point[:70]}...")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            import traceback
            traceback.print_exc()

    print("\n" + "=" * 80)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    print("=" * 80)


def test_entity_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π"""
    print("\n" + "=" * 80)
    print("üîç –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –°–£–©–ù–û–°–¢–ï–ô")
    print("=" * 80)

    test_text = """
    –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –û–ª—å–≥–∞ –Ø—Ü–µ–Ω–∫–æ. –Ø —Ö–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –¥–µ–ª—é–∫—Å —Å –±–∞–ª–∫–æ–Ω–æ–º 
    —Å 15 –æ–∫—Ç—è–±—Ä—è –ø–æ 22 –æ–∫—Ç—è–±—Ä—è. –ù–∞—Å –±—É–¥–µ—Ç –¥–≤–æ–µ –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ –æ–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫ 9 –ª–µ—Ç.
    –°—Ç–æ–∏–º–æ—Å—Ç—å 235 980 —Ä—É–±–ª–µ–π –º–µ–Ω—è —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç. –ú–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω +7 926 151 88 96,
    –ø–æ—á—Ç–∞ test@example.com. –ù—É–∂–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –∏–∑ –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö –í–æ–¥.
    """

    try:
        from advanced_nlu import AdvancedNLUAnalyzer
        nlu = AdvancedNLUAnalyzer()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
        result = nlu.analyze_dialogue(test_text)
        entities = result.get('entities', {})

        print("\nüìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:")

        if entities.get('persons'):
            print(f"üë§ –ü–µ—Ä—Å–æ–Ω—ã: {entities['persons']}")

        if entities.get('dates'):
            print(f"üìÖ –î–∞—Ç—ã: {len(entities['dates'])} –Ω–∞–π–¥–µ–Ω–æ")
            for date in entities['dates']:
                print(f"   ‚Ä¢ {date.get('text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

        if entities.get('money'):
            print(f"üí∞ –°—É–º–º—ã:")
            for money in entities['money']:
                print(f"   ‚Ä¢ {money.get('amount', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {money.get('currency', 'RUB')}")

        if entities.get('phones'):
            print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã: {entities['phones']}")

        if entities.get('emails'):
            print(f"üìß Email: {entities['emails']}")

        if entities.get('locations'):
            print(f"üìç –õ–æ–∫–∞—Ü–∏–∏: {entities['locations']}")

        if entities.get('room_types'):
            print(f"üè® –¢–∏–ø—ã –Ω–æ–º–µ—Ä–æ–≤: {entities['room_types']}")

        if entities.get('duration_nights'):
            print(f"üåô –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {entities['duration_nights']} –Ω–æ—á–µ–π")

        if entities.get('guest_count'):
            print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {entities['guest_count']}")

    except ImportError:
        print("‚ö†Ô∏è NLU –º–æ–¥—É–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ NLU –∞–Ω–∞–ª–∏–∑–∞\n")

    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    test_nlu_analysis()

    # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π
    test_entity_extraction()

    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã\n")